import path from 'path'
import { createReactCodeConnect } from '../create'
const fs = require('fs')
import prettier from 'prettier'
import { FigmaRestApi } from '../../connect/figma_rest_api'

jest.mock('fs')

describe('createReactCodeConnect', () => {
  beforeEach(() => {
    jest.resetAllMocks()
  })
  it('Should generate a boolean variant if the variant options are all boolean', async () => {
    fs.existsSync.mockReturnValue(false)

    await createReactCodeConnect({
      destinationDir: 'test',
      destinationFile: 'test.figma.tsx',
      config: { parser: 'react' },
      mode: 'CREATE',
      component: {
        id: '1:1',
        figmaNodeUrl: 'fake-url',
        name: 'Test',
        normalizedName: 'Test',
        type: 'COMPONENT_SET',
        componentPropertyDefinitions: {
          BooleanVariant: {
            type: 'VARIANT',
            defaultValue: 'true',
            variantOptions: ['true', 'false'],
          },
          BooleanVariant2: {
            type: 'VARIANT',
            defaultValue: 'True',
            variantOptions: ['True', 'False'],
          },
          BooleanVariant3: { type: 'VARIANT', defaultValue: 'yes', variantOptions: ['yes', 'no'] },
          BooleanVariant4: { type: 'VARIANT', defaultValue: 'Yes', variantOptions: ['Yes', 'No'] },
          BooleanVariant5: { type: 'VARIANT', defaultValue: 'on', variantOptions: ['on', 'off'] },
          BooleanVariant6: { type: 'VARIANT', defaultValue: 'On', variantOptions: ['On', 'Off'] },
          Variant: {
            type: 'VARIANT',
            defaultValue: 'Yes',
            variantOptions: ['Yes', 'No', 'Intermediate'],
          },
          Variant2: {
            type: 'VARIANT',
            defaultValue: 'Yes',
            variantOptions: ['True', 'SomethingElse'],
          },
        },
      },
    })

    const expected = await prettier.format(
      `\
import React from "react"
import { Test } from "./Test"
import figma from "@figma/code-connect"

/**
 * -- This file was auto-generated by \`figma connect create\` --
 * \`props\` includes a mapping from Figma properties and variants to
 * suggested values. You should update this to match the props of your
 * code component, and update the \`example\` function to return the
 * code example you'd like to see in Figma
*/

figma.connect(Test, "fake-url", {
  props: {
    booleanVariant: figma.boolean("BooleanVariant"),
    booleanVariant2: figma.boolean("BooleanVariant2"),
    booleanVariant3: figma.boolean("BooleanVariant3"),
    booleanVariant4: figma.boolean("BooleanVariant4"),
    booleanVariant5: figma.boolean("BooleanVariant5"),
    booleanVariant6: figma.boolean("BooleanVariant6"),
    variant: figma.enum("Variant", {
      Yes: "yes",
      No: "no",
      Intermediate: "intermediate",
    }),
    variant2: figma.enum("Variant2", {
      True: "true",
      SomethingElse: "somethingelse",
    }),
  },
  example: (props) => <Test />,
})`,
      {
        parser: 'typescript',
        semi: false,
        trailingComma: 'all',
      },
    )

    expect(fs.writeFileSync).toHaveBeenCalledWith('test.figma.tsx', expected)
  })

  it('Should use any available prop mappings', async () => {
    fs.existsSync.mockReturnValue(false)

    await createReactCodeConnect({
      destinationDir: 'test',
      destinationFile: 'test.figma.tsx',
      config: { parser: 'react' },
      mode: 'CREATE',
      propMapping: {
        'Has icon': {
          codePropName: 'actualPropNameForhasIcon',
          mapping: FigmaRestApi.ComponentPropertyType.Boolean,
        },
        Title: {
          codePropName: 'actualPropNameForTitle',
          mapping: FigmaRestApi.ComponentPropertyType.Text,
        },
      },
      component: {
        id: '1:1',
        figmaNodeUrl: 'fake-url',
        name: 'Test',
        normalizedName: 'Test',
        type: 'COMPONENT_SET',
        componentPropertyDefinitions: {
          BooleanVariant: {
            type: 'VARIANT',
            defaultValue: 'true',
            variantOptions: ['true', 'false'],
          },
          Label: {
            type: 'TEXT',
            defaultValue: 'Some label',
          },
          'Some other text': {
            type: 'TEXT',
            defaultValue: '',
          },
          'Has icon': {
            type: 'BOOLEAN',
            defaultValue: false,
          },
        },
      },
    })

    const expected = await prettier.format(
      `\
import React from "react"
import { Test } from "./Test"
import figma from "@figma/code-connect"

/**
 * -- This file was auto-generated by \`figma connect create\` --
 * \`props\` includes a mapping from Figma properties and variants to
 * suggested values. You should update this to match the props of your
 * code component, and update the \`example\` function to return the
 * code example you'd like to see in Figma
*/

figma.connect(Test, "fake-url", {
  props: {
    booleanVariant: figma.boolean(\"BooleanVariant\"),
    label: figma.string(\"Label\"),
    someothertext: figma.string(\"Some other text\"),
    actualPropNameForhasIcon: figma.boolean(\"Has icon\"),
  },
  example: (props) => <Test />,
})`,
      {
        parser: 'typescript',
        semi: false,
        trailingComma: 'all',
      },
    )

    expect(fs.writeFileSync).toHaveBeenCalledWith('test.figma.tsx', expected)
  })

  it('Should generate the import string correctly when sourceFilepath and sourceExport are present', async () => {
    fs.existsSync.mockReturnValue(false)

    await createReactCodeConnect({
      destinationDir: path.join('src', 'components', 'figma'),
      sourceFilepath: path.join('src', 'components', 'buttons', 'PrimaryButton.tsx'),
      sourceExport: 'default',
      config: { parser: 'react' },
      mode: 'CREATE',
      component: {
        id: '1:1',
        figmaNodeUrl: 'fake-url',
        name: 'Main Button',
        normalizedName: 'MainButton',
        type: 'COMPONENT_SET',
        componentPropertyDefinitions: {},
      },
    })

    const expected = await prettier.format(
      `\
import React from "react"
import PrimaryButton from "../buttons/PrimaryButton"
import figma from "@figma/code-connect"

/**
 * -- This file was auto-generated by \`figma connect create\` --
 * \`props\` includes a mapping from Figma properties and variants to
 * suggested values. You should update this to match the props of your
 * code component, and update the \`example\` function to return the
 * code example you'd like to see in Figma
*/

figma.connect(PrimaryButton, "fake-url", {
  props: {
  },
  example: (props) => <PrimaryButton />,
})`,
      {
        parser: 'typescript',
        semi: false,
        trailingComma: 'all',
      },
    )

    expect(fs.writeFileSync).toHaveBeenCalledWith(
      path.join('src', 'components', 'figma', 'PrimaryButton.figma.tsx'),
      expected,
    )
  })
})
